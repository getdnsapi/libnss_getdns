MODULE_NAME=@module_name@
DBUS_SERVICE_FILE=@dbus_service_file@
DBUS_SERVICES_DIR=@dbus_services_dir@
DBUS_INTERFACE_FILE=@dbus_interface_file@
DBUS_INTERFACES_DIR=@dbus_interfaces_dir@
SERVICE_EXEC_DIR=@dbus_service_exec_dir@
DEFS=@DEFS@
CONTEXT_DAEMON_EXEC=getdns_daemon
TEST_DIR=test
PRELOAD_LIB = @preload_on_install@
CTX_PROXY = @ctx_proxy@
CTX_PROXY_IMPL = @ctx_proxy_impl@
EXTRA_DEPS_INCLUDES = @extra_includes@
EXTRA_LDLIBS = @extra_ldlibs@
CC = @CC@
INSTALL_PATH = @libdir@
LIBS_PATH = @libdir@
LIBNAME = getdns_shim-1.15.so
LIB_PATH = $(LIBS_PATH)/$(LIBNAME)
LIB_ALIAS = $(LIBS_PATH)/$(MODULE_NAME)
OBJECTS = $(patsubst %.c,%.o,$(wildcard *.c services/*.c))
CFLAGS = $(DEFS) -I/usr/local/include $(EXTRA_DEPS_INCLUDES) -gdwarf-2 -O3 -fPIC -Wall
LDFLAGS = -L/usr/local/lib -shared -rdynamic -Wl,-soname,$(LIBNAME) -Wl,--no-undefined 
LDLIBS = -lm -lgetdns -lunbound -lidn -lldns -lcrypto -lssl $(EXTRA_LDLIBS)
srcdir = @srcdir@
INSTALL = @INSTALL@

build : $(OBJECTS)
ifneq ($(CTX_PROXY), )
	$(CC) $(OBJECTS) $(CTX_PROXY_IMPL) -o $(LIBNAME) $(CFLAGS) $(LDFLAGS) $(LDLIBS)
	$(CC) -DMAIN $(OBJECTS) $(CTX_PROXY_IMPL) -o $(CONTEXT_DAEMON_EXEC) $(CFLAGS) $(LDFLAGS) $(LDLIBS)
else
	$(CC) $(OBJECTS) -o $(LIBNAME) $(LDFLAGS) $(LDLIBS)
endif

build_tests :
	$(MAKE) -C $(TEST_DIR)
		
test : build_tests
	$(MAKE) -C $(TEST_DIR) test
	
install : $(LIBNAME) 
	mkdir -p $(SERVICE_EXEC_DIR)
	$(INSTALL) -m 644 $(LIBNAME) $(LIBS_PATH)
	ldconfig /usr/local/lib
	ln -sf $(LIBS_PATH)/$(LIBNAME) $(LIB_ALIAS)
ifeq ($(CTX_PROXY), dbus)
	$(INSTALL) -m 644 $(srcdir)/conf/$(DBUS_SERVICE_FILE) $(DBUS_SERVICES_DIR)
	$(INSTALL) -m 644 $(srcdir)/conf/$(DBUS_INTERFACE_FILE) $(DBUS_INTERFACES_DIR)
	$(INSTALL) -m 644  $(srcdir)/$(CONTEXT_DAEMON_EXEC) $(SERVICE_EXEC_DIR)
endif
	$(INSTALL) -m 644 $(srcdir)/data/error.html $(SERVICE_EXEC_DIR)
	$(INSTALL) -m 644 $(srcdir)/data/settings.html $(SERVICE_EXEC_DIR)
	$(INSTALL) -m 644 $(srcdir)/conf/getdns.conf /etc
	#install BSD-style init script if (*BSD)
ifeq ($(wildcard /etc/rc.d/), /etc/rc.d/)
	$(INSTALL) -m 755 $(srcdir)/conf/getdns-pfw-bsd /etc/rc.d
	mv /etc/rc.d/getdns-pfw-bsd /etc/rc.d/getdns-pfw
endif
	#install SysV script if directory /etc/init.d/ exists (new Linux'es)
ifeq ($(wildcard /etc/init.d/), /etc/init.d/)
	$(INSTALL) -m 755 $(srcdir)/conf/getdns-pfw /etc/init.d
	update-rc.d getdns-pfw enable || true
endif
	#install Upstart script if directory /etc/init/ exists (even newer Linux'es)
ifeq ($(wildcard /etc/init/), /etc/init/)
	$(INSTALL) -m 644 $(srcdir)/conf/getdns-pfw.conf /etc/init
endif
	#install something for Systemd if supported
ifeq ($(wildcard /etc/systemd/system/), /etc/systemd/system/)
	$(INSTALL) -m 755 $(srcdir)/conf/getdns-pfw.sh /usr/local/sbin
	$(INSTALL) -m 755 $(srcdir)/conf/getdns-pfw.service /etc/systemd/system
endif
	#Test-start the getdns-pfw service
ifneq ($(shell which systemctl),)
	systemctl start getdns-pfw.service
else	
	service getdns-pfw start
endif
	@echo "***"
	@echo "***  !!! IMPORTANT !!!!  this library uses nsswitch!"
	@echo "***"
	@echo "***  For the library to be used instead of the system's default,"
	@echo "***  it has to be activated through nsswitch"
	@echo "***  in the file: "
	@echo "***        /etc/nsswitch.conf"
	@echo "***"
	@echo "***  Replace the default source for the 'hosts' database by 'getdns'"
	@echo "***  for instance, find the line that starts with 'hosts:' and replace anything but 'files' by 'getdns' "
	@echo "***"
	@echo "***  Leaving the 'files' source is optional, as the library will by default consult it if necessary."
	@echo "***	The library can be configured through /etc/getdns.conf, or in a browser at http://getdns-config.localhost:8080"
	@echo "***"
	
uninstall:
	yes | rm -rf $(LIB_ALIAS) $(LIBS_PATH)/$(LIBNAME) $(DBUS_INTERFACES_DIR) $(DBUS_SERVICES_DIR) /etc/init/getdns-pfw.conf /etc/init.d/getdns-pfw $(SERVICE_EXEC_DIR)/$(CONTEXT_DAEMON_EXEC)

obj : 
	$(CC) *.c $(CFLAGS)
	
clean :
	rm -f *.o *.c~ *.h~ services/*~ services/*.o contexts/*~ contexts/*.o $(LIBNAME) $(CONTEXT_DAEMON_EXEC)
	$(MAKE) -C $(TEST_DIR) clean
	
.PHONY: clean test

